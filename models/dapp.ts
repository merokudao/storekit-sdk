/* tslint:disable */
/* eslint-disable */
/**
 * Meroku API Documentation
 * Open API specs for Meroku APIs. These APIs are required to inteact with the registry in a safe, easy way. The recommended way to use in a project is to use the npm package published at [@merokudao/storekit-sdk](https://www.npmjs.com/package/@merokudao/storekit-sdk). This npmjs package is a wrapper around the api. You would still want to use the APIs if you're building on a different platform.  # Authentication - To learn more on Authentication and the benefits of using higher rate limit, [read this Meroku.xyz blog post](https://meroku.xyz/2023/06/08/meroku-api-updates/). - To request an API key [fill this developer access form](https://form.jotform.com/231576486954067) - You can try this UI without getting any API Key as well # Learn More - [How to build a dApp Store using Meroku APIs](https://docs.meroku.org/dapp-store-kit-docs/for-dapp-store-builders#api--sdk-1) - [Meroku Blog](https://meroku.xyz) # Support - [Support Discourse Group](https://meroku.discourse.group) # Stay Connected - [Follow us on Github](https://github.com/merokudao) - [Follow us on Twitter](https://twitter.com/MerokuStore) 
 *
 * OpenAPI spec version: 1.27
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AppDownloadBaseUrl } from './app-download-base-url';
import { DappCdn } from './dapp-cdn';
import { DappContracts } from './dapp-contracts';
import { DappDeveloper } from './dapp-developer';
import { DappGeoRestrictions } from './dapp-geo-restrictions';
import { DappImages } from './dapp-images';
import { DappMetrics } from './dapp-metrics';
import { DappReferredBy } from './dapp-referred-by';
import { DappSupport } from './dapp-support';
import { WebDownloadBaseUrl } from './web-download-base-url';
/**
 * 
 * @export
 * @interface Dapp
 */
export interface Dapp {
    /**
     * Dapp Name
     * @type {string}
     * @memberof Dapp
     */
    name: string;
    /**
     * About dApp
     * @type {string}
     * @memberof Dapp
     */
    description: string;
    /**
     * The URL of the dApp from where the webview will be loaded.
     * @type {string}
     * @memberof Dapp
     */
    appUrl?: string;
    /**
     * 
     * @type {DappImages}
     * @memberof Dapp
     */
    images?: DappImages;
    /**
     * If this is in OpenSource, the URL of the repository
     * @type {string}
     * @memberof Dapp
     */
    repoUrl?: string;
    /**
     * A Unique ID for each dApp
     * @type {string}
     * @memberof Dapp
     */
    dappId: string;
    /**
     * The min age of user who should access this dApp
     * @type {number}
     * @memberof Dapp
     */
    minAge: number;
    /**
     * Boolean to signify if the dApp is for mature audience
     * @type {boolean}
     * @memberof Dapp
     */
    isForMatureAudience: boolean;
    /**
     * Boolean to signify if the dApp developers have a moderation in place for the content posted/generated by the dApp or it's users
     * @type {boolean}
     * @memberof Dapp
     */
    isSelfModerated: boolean;
    /**
     * A string in ISO-639-1 which signifies the language of the dApp
     * @type {string}
     * @memberof Dapp
     */
    language: string;
    /**
     * The version of the dApp that is available on the dApp store
     * @type {string}
     * @memberof Dapp
     */
    version: string;
    /**
     * Boolean to signify if the dApp is listed on the dApp store
     * @type {boolean}
     * @memberof Dapp
     */
    isListed: boolean;
    /**
     * The date on which this dApp is listed on dApp store. This date can be a future date as well. This can not be in past.
     * @type {string}
     * @memberof Dapp
     */
    listDate: string;
    /**
     * A string signifying if the dApp is available on which platform - web, iOS, android
     * @type {Array<string>}
     * @memberof Dapp
     */
    availableOnPlatform: Array<DappAvailableOnPlatformEnum>;
    /**
     * 
     * @type {DappGeoRestrictions}
     * @memberof Dapp
     */
    geoRestrictions?: DappGeoRestrictions;
    /**
     * 
     * @type {DappDeveloper}
     * @memberof Dapp
     */
    developer: DappDeveloper;
    /**
     * 
     * @type {string}
     * @memberof Dapp
     */
    privacyPolicyUrl?: string;
    /**
     * 
     * @type {DappSupport}
     * @memberof Dapp
     */
    support?: DappSupport;
    /**
     * 
     * @type {Array<string>}
     * @memberof Dapp
     */
    tags: Array<string>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Dapp
     */
    chains: Array<number>;
    /**
     * The category of the dApp. You can assign one category to your dApp. The category you select is particularly important for your app's discoverability on the dApp Store. This will be the category in which the app appears when users browse the dApp Store or filter search results, and it determines placement on the dApps tab or Games.
     * @type {string}
     * @memberof Dapp
     */
    category: DappCategoryEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof Dapp
     */
    walletApiVersion?: Array<string>;
    /**
     * 
     * @type {Array<AppDownloadBaseUrl | WebDownloadBaseUrl>}
     * @memberof Dapp
     */
    downloadBaseUrls?: Array<AppDownloadBaseUrl | WebDownloadBaseUrl>;
    /**
     * 
     * @type {Array<DappContracts>}
     * @memberof Dapp
     */
    contracts?: Array<DappContracts>;
    /**
     * 
     * @type {DappMetrics}
     * @memberof Dapp
     */
    metrics?: DappMetrics;
    /**
     * The sub-category of the dApp. You can assign one sub-category to your dApp. The sub-category you select is particularly important for your app's discoverability on the dApp Store. This will be the sub-category in which the app appears when users browse the dApp Store or filter search results.
     * @type {string}
     * @memberof Dapp
     */
    subCategory?: string;
    /**
     * 
     * @type {DappReferredBy}
     * @memberof Dapp
     */
    referredBy?: DappReferredBy;
    /**
     * minted status, this is optional field
     * @type {string}
     * @memberof Dapp
     */
    minted?: string;
    /**
     * 
     * @type {DappCdn}
     * @memberof Dapp
     */
    cdn?: DappCdn;
}

/**
    * @export
    * @enum {string}
    */
export enum DappAvailableOnPlatformEnum {
    Ios = 'ios',
    Web = 'web',
    Android = 'android'
}
/**
    * @export
    * @enum {string}
    */
export enum DappCategoryEnum {
    Books = 'books',
    Business = 'business',
    DeveloperTools = 'developer-tools',
    Education = 'education',
    Entertainment = 'entertainment',
    Finance = 'finance',
    FoodAndDrink = 'food-and-drink',
    Games = 'games',
    Gambling = 'gambling',
    HealthAndFitness = 'health-and-fitness',
    Kids = 'kids',
    Lifestyle = 'lifestyle',
    News = 'news',
    Nft = 'nft',
    Personalization = 'personalization',
    Photography = 'photography',
    Productivity = 'productivity',
    Shopping = 'shopping',
    SocialNetworking = 'social-networking',
    Sports = 'sports',
    Travel = 'travel',
    Utilities = 'utilities'
}

