/* tslint:disable */
/* eslint-disable */
/**
 * Meroku API Documentation
 * Open API specs for Meroku APIs. These APIs are required to inteact with the registry in a safe, easy way. The recommended way to use in a project is to use the npm package published at [@merokudao/storekit-sdk](https://www.npmjs.com/package/@merokudao/storekit-sdk). This npmjs package is a wrapper around the api. You would still want to use the APIs if you're building on a different platform.  # Authentication - To learn more on Authentication and the benefits of using higher rate limit, [read this Meroku.xyz blog post](https://meroku.xyz/2023/06/08/meroku-api-updates/). - To request an API key [fill this developer access form](https://form.jotform.com/231576486954067) - You can try this UI without getting any API Key as well # Learn More - [How to build a dApp Store using Meroku APIs](https://docs.meroku.org/dapp-store-kit-docs/for-dapp-store-builders#api--sdk-1) - [Meroku Blog](https://meroku.xyz) # Support - [Support Discourse Group](https://meroku.discourse.group) # Stay Connected - [Follow us on Github](https://github.com/merokudao) - [Follow us on Twitter](https://twitter.com/MerokuStore) 
 *
 * OpenAPI spec version: 1.27
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { InlineResponse2006 } from '../models';
import { InlineResponse2007 } from '../models';
import { InlineResponse2008 } from '../models';
import { PreSignedUrlResponse } from '../models';
/**
 * DAppRegistryApi - axios parameter creator
 * @export
 */
export const DAppRegistryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DappAutocompleteGet: async (search: string, storeKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling apiV1DappAutocompleteGet.');
            }
            const localVarPath = `/api/v1/dapp/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DappCategoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dapp/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search DApp By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DappSearchAddressOwnerAddressGet: async (ownerAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerAddress' is not null or undefined
            if (ownerAddress === null || ownerAddress === undefined) {
                throw new RequiredError('ownerAddress','Required parameter ownerAddress was null or undefined when calling apiV1DappSearchAddressOwnerAddressGet.');
            }
            const localVarPath = `/api/v1/dapp/search/address/{ownerAddress}`
                .replace(`{${"ownerAddress"}}`, encodeURIComponent(String(ownerAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DappSearchDappIdGet: async (dappId: string, storeKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling apiV1DappSearchDappIdGet.');
            }
            const localVarPath = `/api/v1/dapp/search/{dappId}`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppFilesV1Form: async (dappId: string, field: string, dAppFiles: Array<Blob>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling dAppFilesV1Form.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling dAppFilesV1Form.');
            }
            // verify required parameter 'dAppFiles' is not null or undefined
            if (dAppFiles === null || dAppFiles === undefined) {
                throw new RequiredError('dAppFiles','Required parameter dAppFiles was null or undefined when calling dAppFilesV1Form.');
            }
            const localVarPath = `/api/v1/dapp/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }


            if (dappId !== undefined) { 
                localVarFormParams.append('dappId', dappId as any);
            }

            if (field !== undefined) { 
                localVarFormParams.append('field', field as any);
            }
            if (dAppFiles) {
                dAppFiles.forEach((element) => {
                    localVarFormParams.append('dAppFiles', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBuildUrlV1: async (dappId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling downloadBuildUrlV1.');
            }
            const localVarPath = `/api/v1/dapp/{dappId}/build`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp. This API call will get all the dApps or perform a text search.
         * @summary Search Dapps
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {Array<string>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {Array<string>} [subCategories] The sub-categories in which dApps belong. Multiple sub-categories are joined using OR operator. To get a list of sub categories for a category, use the &#x60;/dapp/categories&#x60; API.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {string} [language] DApp&#x27;s language
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [isForMatureAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDapps: async (page?: number, limit?: number, orderBy?: string, search?: string, categories?: Array<string>, subCategories?: Array<string>, isListed?: boolean, isMinted?: boolean, language?: string, chainId?: number, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, availableOnPlatform?: Array<string>, isForMatureAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, storeKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dapp/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (subCategories) {
                localVarQueryParameter['subCategories'] = subCategories;
            }

            if (isListed !== undefined) {
                localVarQueryParameter['isListed'] = isListed;
            }

            if (isMinted !== undefined) {
                localVarQueryParameter['isMinted'] = isMinted;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (allowedInCountries) {
                localVarQueryParameter['allowedInCountries'] = allowedInCountries;
            }

            if (blockedInCountries) {
                localVarQueryParameter['blockedInCountries'] = blockedInCountries;
            }

            if (availableOnPlatform) {
                localVarQueryParameter['availableOnPlatform'] = availableOnPlatform;
            }

            if (isForMatureAudience !== undefined) {
                localVarQueryParameter['isForMatureAudience'] = isForMatureAudience;
            }

            if (minAge !== undefined) {
                localVarQueryParameter['minAge'] = minAge;
            }

            if (listedOnOrAfter !== undefined) {
                localVarQueryParameter['listedOnOrAfter'] = (listedOnOrAfter as any instanceof Date) ?
                    (listedOnOrAfter as any).toISOString().substr(0,10) :
                    listedOnOrAfter;
            }

            if (listedOnOrBefore !== undefined) {
                localVarQueryParameter['listedOnOrBefore'] = (listedOnOrBefore as any instanceof Date) ?
                    (listedOnOrBefore as any).toISOString().substr(0,10) :
                    listedOnOrBefore;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DAppRegistryApi - functional programming interface
 * @export
 */
export const DAppRegistryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappAutocompleteGet(search: string, storeKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2008>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).apiV1DappAutocompleteGet(search, storeKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappCategoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).apiV1DappCategoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search DApp By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchAddressOwnerAddressGet(ownerAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).apiV1DappSearchAddressOwnerAddressGet(ownerAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchDappIdGet(dappId: string, storeKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2007>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).apiV1DappSearchDappIdGet(dappId, storeKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppFilesV1Form(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).dAppFilesV1Form(dappId, field, dAppFiles, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBuildUrlV1(dappId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PreSignedUrlResponse>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).downloadBuildUrlV1(dappId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp. This API call will get all the dApps or perform a text search.
         * @summary Search Dapps
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {Array<string>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {Array<string>} [subCategories] The sub-categories in which dApps belong. Multiple sub-categories are joined using OR operator. To get a list of sub categories for a category, use the &#x60;/dapp/categories&#x60; API.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {string} [language] DApp&#x27;s language
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [isForMatureAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDapps(page?: number, limit?: number, orderBy?: string, search?: string, categories?: Array<string>, subCategories?: Array<string>, isListed?: boolean, isMinted?: boolean, language?: string, chainId?: number, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, availableOnPlatform?: Array<string>, isForMatureAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, storeKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2006>>> {
            const localVarAxiosArgs = await DAppRegistryApiAxiosParamCreator(configuration).searchDapps(page, limit, orderBy, search, categories, subCategories, isListed, isMinted, language, chainId, allowedInCountries, blockedInCountries, availableOnPlatform, isForMatureAudience, minAge, listedOnOrAfter, listedOnOrBefore, storeKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DAppRegistryApi - factory interface
 * @export
 */
export const DAppRegistryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappAutocompleteGet(search: string, storeKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2008>> {
            return DAppRegistryApiFp(configuration).apiV1DappAutocompleteGet(search, storeKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappCategoriesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DAppRegistryApiFp(configuration).apiV1DappCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search DApp By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchAddressOwnerAddressGet(ownerAddress: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return DAppRegistryApiFp(configuration).apiV1DappSearchAddressOwnerAddressGet(ownerAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchDappIdGet(dappId: string, storeKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2007>> {
            return DAppRegistryApiFp(configuration).apiV1DappSearchDappIdGet(dappId, storeKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppFilesV1Form(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return DAppRegistryApiFp(configuration).dAppFilesV1Form(dappId, field, dAppFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBuildUrlV1(dappId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PreSignedUrlResponse>> {
            return DAppRegistryApiFp(configuration).downloadBuildUrlV1(dappId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp. This API call will get all the dApps or perform a text search.
         * @summary Search Dapps
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {Array<string>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {Array<string>} [subCategories] The sub-categories in which dApps belong. Multiple sub-categories are joined using OR operator. To get a list of sub categories for a category, use the &#x60;/dapp/categories&#x60; API.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {string} [language] DApp&#x27;s language
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [isForMatureAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDapps(page?: number, limit?: number, orderBy?: string, search?: string, categories?: Array<string>, subCategories?: Array<string>, isListed?: boolean, isMinted?: boolean, language?: string, chainId?: number, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, availableOnPlatform?: Array<string>, isForMatureAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, storeKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2006>> {
            return DAppRegistryApiFp(configuration).searchDapps(page, limit, orderBy, search, categories, subCategories, isListed, isMinted, language, chainId, allowedInCountries, blockedInCountries, availableOnPlatform, isForMatureAudience, minAge, listedOnOrAfter, listedOnOrBefore, storeKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DAppRegistryApi - object-oriented interface
 * @export
 * @class DAppRegistryApi
 * @extends {BaseAPI}
 */
export class DAppRegistryApi extends BaseAPI {
    /**
     * 
     * @summary Auto-Complete search
     * @param {string} search 
     * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async apiV1DappAutocompleteGet(search: string, storeKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2008>> {
        return DAppRegistryApiFp(this.configuration).apiV1DappAutocompleteGet(search, storeKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All category with subcategories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async apiV1DappCategoriesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DAppRegistryApiFp(this.configuration).apiV1DappCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search DApp By owner Address
     * @param {string} ownerAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async apiV1DappSearchAddressOwnerAddressGet(ownerAddress: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return DAppRegistryApiFp(this.configuration).apiV1DappSearchAddressOwnerAddressGet(ownerAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search DApp By Dapp Id
     * @param {string} dappId 
     * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async apiV1DappSearchDappIdGet(dappId: string, storeKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2007>> {
        return DAppRegistryApiFp(this.configuration).apiV1DappSearchDappIdGet(dappId, storeKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Uploading dapp screenshots | logo | banner | dApp file to the servers
     * @summary Upload dApp files
     * @param {string} dappId 
     * @param {string} field 
     * @param {Array<Blob>} dAppFiles 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async dAppFilesV1Form(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return DAppRegistryApiFp(this.configuration).dAppFilesV1Form(dappId, field, dAppFiles, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Build Download URL
     * @param {string} dappId Dapp Id where upload will happen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async downloadBuildUrlV1(dappId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PreSignedUrlResponse>> {
        return DAppRegistryApiFp(this.configuration).downloadBuildUrlV1(dappId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp. This API call will get all the dApps or perform a text search.
     * @summary Search Dapps
     * @param {number} [page] Current page
     * @param {number} [limit] Page size
     * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
     * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
     * @param {Array<string>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
     * @param {Array<string>} [subCategories] The sub-categories in which dApps belong. Multiple sub-categories are joined using OR operator. To get a list of sub categories for a category, use the &#x60;/dapp/categories&#x60; API.
     * @param {boolean} [isListed] DApp is listed or not
     * @param {boolean} [isMinted] DApp is listed or not
     * @param {string} [language] DApp&#x27;s language
     * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
     * @param {Array<string>} [allowedInCountries] dApp allowed countries
     * @param {Array<string>} [blockedInCountries] dApp blocked countries
     * @param {Array<string>} [availableOnPlatform] DApp is listed or not
     * @param {boolean} [isForMatureAudience] Mentions if the app is for all ages or only mature audience
     * @param {number} [minAge] Minimum age
     * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
     * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
     * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DAppRegistryApi
     */
    public async searchDapps(page?: number, limit?: number, orderBy?: string, search?: string, categories?: Array<string>, subCategories?: Array<string>, isListed?: boolean, isMinted?: boolean, language?: string, chainId?: number, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, availableOnPlatform?: Array<string>, isForMatureAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, storeKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2006>> {
        return DAppRegistryApiFp(this.configuration).searchDapps(page, limit, orderBy, search, categories, subCategories, isListed, isMinted, language, chainId, allowedInCountries, blockedInCountries, availableOnPlatform, isForMatureAudience, minAge, listedOnOrAfter, listedOnOrBefore, storeKey, options).then((request) => request(this.axios, this.basePath));
    }
}
