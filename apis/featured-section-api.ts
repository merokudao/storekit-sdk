/* tslint:disable */
/* eslint-disable */
/**
 * Meroku API Documentation
 * Open API specs for Meroku APIs. These APIs are required to inteact with the registry in a safe, easy way. The recommended way to use in a project is to use the npm package published at [@merokudao/storekit-sdk](https://www.npmjs.com/package/@merokudao/storekit-sdk). This npmjs package is a wrapper around the api. You would still want to use the APIs if you're building on a different platform.  # Authentication - To learn more on Authentication and the benefits of using higher rate limit, [read this Meroku.xyz blog post](https://meroku.xyz/2023/06/08/meroku-api-updates/). - To request an API key [fill this developer access form](https://form.jotform.com/231576486954067) - You can try this UI without getting any API Key as well # Learn More - [How to build a dApp Store using Meroku APIs](https://docs.meroku.org/dapp-store-kit-docs/for-dapp-store-builders#api--sdk-1) - [Meroku Blog](https://meroku.xyz) # Support - [Support Discourse Group](https://meroku.discourse.group) # Stay Connected - [Follow us on Github](https://github.com/merokudao) - [Follow us on Twitter](https://twitter.com/MerokuStore) 
 *
 * OpenAPI spec version: 1.27
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { FeaturedSection } from '../models';
/**
 * FeaturedSectionApi - axios parameter creator
 * @export
 */
export const FeaturedSectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {string} [featuredSectionKey] Unique Id of a particular featured section of the store. provide only if you want to fetch a perticular feature section of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedDAppsV1: async (storeKey?: string, featuredSectionKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/store/featured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            if (featuredSectionKey !== undefined) {
                localVarQueryParameter['featuredSectionKey'] = featuredSectionKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreTitleV1: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/store/title/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeaturedSectionApi - functional programming interface
 * @export
 */
export const FeaturedSectionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {string} [featuredSectionKey] Unique Id of a particular featured section of the store. provide only if you want to fetch a perticular feature section of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedDAppsV1(storeKey?: string, featuredSectionKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FeaturedSection>>>> {
            const localVarAxiosArgs = await FeaturedSectionApiAxiosParamCreator(configuration).getFeaturedDAppsV1(storeKey, featuredSectionKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreTitleV1(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await FeaturedSectionApiAxiosParamCreator(configuration).getStoreTitleV1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeaturedSectionApi - factory interface
 * @export
 */
export const FeaturedSectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {string} [featuredSectionKey] Unique Id of a particular featured section of the store. provide only if you want to fetch a perticular feature section of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedDAppsV1(storeKey?: string, featuredSectionKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FeaturedSection>>> {
            return FeaturedSectionApiFp(configuration).getFeaturedDAppsV1(storeKey, featuredSectionKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreTitleV1(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return FeaturedSectionApiFp(configuration).getStoreTitleV1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeaturedSectionApi - object-oriented interface
 * @export
 * @class FeaturedSectionApi
 * @extends {BaseAPI}
 */
export class FeaturedSectionApi extends BaseAPI {
    /**
     * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
     * @summary Get Featured Sections
     * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
     * @param {string} [featuredSectionKey] Unique Id of a particular featured section of the store. provide only if you want to fetch a perticular feature section of a store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedSectionApi
     */
    public async getFeaturedDAppsV1(storeKey?: string, featuredSectionKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FeaturedSection>>> {
        return FeaturedSectionApiFp(this.configuration).getFeaturedDAppsV1(storeKey, featuredSectionKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the store title
     * @summary Registry title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeaturedSectionApi
     */
    public async getStoreTitleV1(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return FeaturedSectionApiFp(this.configuration).getStoreTitleV1(options).then((request) => request(this.axios, this.basePath));
    }
}
