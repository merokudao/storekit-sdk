/* tslint:disable */
/* eslint-disable */
/**
 * Meroku API Documentation
 * Open API specs for Meroku APIs. These APIs are required to inteact with the registry in a safe, easy way. The recommended way to use in a project is to use the npm package published at [@merokudao/storekit-sdk](https://www.npmjs.com/package/@merokudao/storekit-sdk). This npmjs package is a wrapper around the api. You would still want to use the APIs if you're building on a different platform.  # Authentication - To learn more on Authentication and the benefits of using higher rate limit, [read this Meroku.xyz blog post](https://meroku.xyz/2023/06/08/meroku-api-updates/). - To request an API key [fill this developer access form](https://form.jotform.com/231576486954067) - You can try this UI without getting any API Key as well # Learn More - [How to build a dApp Store using Meroku APIs](https://docs.meroku.org/dapp-store-kit-docs/for-dapp-store-builders#api--sdk-1) - [Meroku Blog](https://meroku.xyz) # Support - [Support Discourse Group](https://meroku.discourse.group) # Stay Connected - [Follow us on Github](https://github.com/merokudao) - [Follow us on Twitter](https://twitter.com/MerokuStore) 
 *
 * OpenAPI spec version: 1.27
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Dapp } from '../models';
import { DappGetVerificationId } from '../models';
import { DappRating } from '../models';
import { DappRatingRes } from '../models';
import { DappRatingResponse } from '../models';
import { DappVerify } from '../models';
import { DomainverificationGetVerificationIdBody } from '../models';
import { DomainverificationVerifyBody } from '../models';
import { FeaturedSection } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
import { PreSignedUrlResponse } from '../models';
import { Store } from '../models';
/**
 * DeprecatedAPIApi - axios parameter creator
 * @export
 */
export const DeprecatedAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DappSearchByIdGet: async (dappId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling apiV1DappSearchByIdGet.');
            }
            const localVarPath = `/api/v1/dapp/searchById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (dappId !== undefined) {
                localVarQueryParameter['dappId'] = dappId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dAppFilesForm: async (dappId: string, field: string, dAppFiles: Array<Blob>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling dAppFilesForm.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling dAppFilesForm.');
            }
            // verify required parameter 'dAppFiles' is not null or undefined
            if (dAppFiles === null || dAppFiles === undefined) {
                throw new RequiredError('dAppFiles','Required parameter dAppFiles was null or undefined when calling dAppFilesForm.');
            }
            const localVarPath = `/dapp/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }


            if (dappId !== undefined) { 
                localVarFormParams.append('dappId', dappId as any);
            }

            if (field !== undefined) { 
                localVarFormParams.append('field', field as any);
            }
            if (dAppFiles) {
                dAppFiles.forEach((element) => {
                    localVarFormParams.append('dAppFiles', element as any);
                })
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dappCategoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dapp/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All rating of a dapp
         * @param {string} dappId 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dappRateDappIdGet: async (dappId: string, page?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling dappRateDappIdGet.');
            }
            const localVarPath = `/dapp/rate/{dappId}`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this to get a user's rating for a dapp
         * @summary Get User dApp Rating
         * @param {string} dappId 
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dappRateGet: async (dappId: string, userId?: string, userAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling dappRateGet.');
            }
            const localVarPath = `/dapp/rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (dappId !== undefined) {
                localVarQueryParameter['dappId'] = dappId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this to register a rating from a user for a dApp
         * @summary Rate the dApp
         * @param {DappRating} [body] Send the request with dApp parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dappRatePost: async (body?: DappRating, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dapp/rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dappSearchByIdGet: async (dappId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling dappSearchByIdGet.');
            }
            const localVarPath = `/dapp/searchById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (dappId !== undefined) {
                localVarQueryParameter['dappId'] = dappId;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this to get a domain verification to code to verify domain ownership.
         * @summary Get a domain verification code
         * @param {DomainverificationGetVerificationIdBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainverificationGetVerificationIdPost: async (body?: DomainverificationGetVerificationIdBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domainverification/getVerificationId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this to verify your domain ownership.
         * @summary Verify domain txt records.
         * @param {DomainverificationVerifyBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainverificationVerifyPost: async (body?: DomainverificationVerifyBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/domainverification/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadBuildUrl: async (dappId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling downloadBuildUrl.');
            }
            const localVarPath = `/dapp/{dappId}/build`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download dapp Build
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadDapp: async (dappId: string, userId?: string, userAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling downloadDapp.');
            }
            const localVarPath = `/o/download/{dappId}`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDApp: async (page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dapp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isListed !== undefined) {
                localVarQueryParameter['isListed'] = isListed;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (availableOnPlatform) {
                localVarQueryParameter['availableOnPlatform'] = availableOnPlatform;
            }

            if (matureForAudience !== undefined) {
                localVarQueryParameter['matureForAudience'] = matureForAudience;
            }

            if (minAge !== undefined) {
                localVarQueryParameter['minAge'] = minAge;
            }

            if (listedOnOrAfter !== undefined) {
                localVarQueryParameter['listedOnOrAfter'] = (listedOnOrAfter as any instanceof Date) ?
                    (listedOnOrAfter as any).toISOString().substr(0,10) :
                    listedOnOrAfter;
            }

            if (listedOnOrBefore !== undefined) {
                localVarQueryParameter['listedOnOrBefore'] = (listedOnOrBefore as any instanceof Date) ?
                    (listedOnOrBefore as any).toISOString().substr(0,10) :
                    listedOnOrBefore;
            }

            if (allowedInCountries) {
                localVarQueryParameter['allowedInCountries'] = allowedInCountries;
            }

            if (blockedInCountries) {
                localVarQueryParameter['blockedInCountries'] = blockedInCountries;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (subCategory) {
                localVarQueryParameter['subCategory'] = subCategory;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDAppV1: async (page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, storeKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dapp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isListed !== undefined) {
                localVarQueryParameter['isListed'] = isListed;
            }

            if (chainId !== undefined) {
                localVarQueryParameter['chainId'] = chainId;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (availableOnPlatform) {
                localVarQueryParameter['availableOnPlatform'] = availableOnPlatform;
            }

            if (matureForAudience !== undefined) {
                localVarQueryParameter['matureForAudience'] = matureForAudience;
            }

            if (minAge !== undefined) {
                localVarQueryParameter['minAge'] = minAge;
            }

            if (listedOnOrAfter !== undefined) {
                localVarQueryParameter['listedOnOrAfter'] = (listedOnOrAfter as any instanceof Date) ?
                    (listedOnOrAfter as any).toISOString().substr(0,10) :
                    listedOnOrAfter;
            }

            if (listedOnOrBefore !== undefined) {
                localVarQueryParameter['listedOnOrBefore'] = (listedOnOrBefore as any instanceof Date) ?
                    (listedOnOrBefore as any).toISOString().substr(0,10) :
                    listedOnOrBefore;
            }

            if (allowedInCountries) {
                localVarQueryParameter['allowedInCountries'] = allowedInCountries;
            }

            if (blockedInCountries) {
                localVarQueryParameter['blockedInCountries'] = blockedInCountries;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (subCategory) {
                localVarQueryParameter['subCategory'] = subCategory;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturedDApps: async (storeKey?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/store/featured`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (storeKey !== undefined) {
                localVarQueryParameter['storeKey'] = storeKey;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStore: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getStore.');
            }
            const localVarPath = `/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreTitle: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/store/title/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStoreV1: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getStoreV1.');
            }
            const localVarPath = `/api/v1/store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Visit dapp's homepage
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        visitDapp: async (dappId: string, userId?: string, userAddress?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dappId' is not null or undefined
            if (dappId === null || dappId === undefined) {
                throw new RequiredError('dappId','Required parameter dappId was null or undefined when calling visitDapp.');
            }
            const localVarPath = `/o/view/{dappId}`
                .replace(`{${"dappId"}}`, encodeURIComponent(String(dappId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userAddress !== undefined) {
                localVarQueryParameter['userAddress'] = userAddress;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeprecatedAPIApi - functional programming interface
 * @export
 */
export const DeprecatedAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchByIdGet(dappId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Dapp>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).apiV1DappSearchByIdGet(dappId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppFilesForm(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2001>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dAppFilesForm(dappId, field, dAppFiles, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappCategoriesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2002>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dappCategoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get All rating of a dapp
         * @param {string} dappId 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRateDappIdGet(dappId: string, page?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DappRatingResponse>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dappRateDappIdGet(dappId, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this to get a user's rating for a dapp
         * @summary Get User dApp Rating
         * @param {string} dappId 
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRateGet(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DappRatingRes>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dappRateGet(dappId, userId, userAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this to register a rating from a user for a dApp
         * @summary Rate the dApp
         * @param {DappRating} [body] Send the request with dApp parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRatePost(body?: DappRating, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DappRatingRes>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dappRatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappSearchByIdGet(dappId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Dapp>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).dappSearchByIdGet(dappId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this to get a domain verification to code to verify domain ownership.
         * @summary Get a domain verification code
         * @param {DomainverificationGetVerificationIdBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainverificationGetVerificationIdPost(body?: DomainverificationGetVerificationIdBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DappGetVerificationId>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).domainverificationGetVerificationIdPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Use this to verify your domain ownership.
         * @summary Verify domain txt records.
         * @param {DomainverificationVerifyBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainverificationVerifyPost(body?: DomainverificationVerifyBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DappVerify>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).domainverificationVerifyPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBuildUrl(dappId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PreSignedUrlResponse>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).downloadBuildUrl(dappId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Download dapp Build
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).downloadDapp(dappId, userId, userAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDApp(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getDApp(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDAppV1(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, storeKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getDAppV1(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, storeKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedDApps(storeKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<FeaturedSection>>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getFeaturedDApps(storeKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStore(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Store>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getStore(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreTitle(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getStoreTitle(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreV1(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Store>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).getStoreV1(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Visit dapp's homepage
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await DeprecatedAPIApiAxiosParamCreator(configuration).visitDapp(dappId, userId, userAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeprecatedAPIApi - factory interface
 * @export
 */
export const DeprecatedAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DappSearchByIdGet(dappId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Dapp>> {
            return DeprecatedAPIApiFp(configuration).apiV1DappSearchByIdGet(dappId, options).then((request) => request(axios, basePath));
        },
        /**
         * Uploading dapp screenshots | logo | banner | dApp file to the servers
         * @summary Upload dApp files
         * @param {string} dappId 
         * @param {string} field 
         * @param {Array<Blob>} dAppFiles 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dAppFilesForm(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2001>> {
            return DeprecatedAPIApiFp(configuration).dAppFilesForm(dappId, field, dAppFiles, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All category with subcategories.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappCategoriesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2002>> {
            return DeprecatedAPIApiFp(configuration).dappCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All rating of a dapp
         * @param {string} dappId 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRateDappIdGet(dappId: string, page?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DappRatingResponse>> {
            return DeprecatedAPIApiFp(configuration).dappRateDappIdGet(dappId, page, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this to get a user's rating for a dapp
         * @summary Get User dApp Rating
         * @param {string} dappId 
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRateGet(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DappRatingRes>> {
            return DeprecatedAPIApiFp(configuration).dappRateGet(dappId, userId, userAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this to register a rating from a user for a dApp
         * @summary Rate the dApp
         * @param {DappRating} [body] Send the request with dApp parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappRatePost(body?: DappRating, options?: AxiosRequestConfig): Promise<AxiosResponse<DappRatingRes>> {
            return DeprecatedAPIApiFp(configuration).dappRatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search DApp By Dapp Id
         * @param {string} dappId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dappSearchByIdGet(dappId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Dapp>> {
            return DeprecatedAPIApiFp(configuration).dappSearchByIdGet(dappId, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this to get a domain verification to code to verify domain ownership.
         * @summary Get a domain verification code
         * @param {DomainverificationGetVerificationIdBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainverificationGetVerificationIdPost(body?: DomainverificationGetVerificationIdBody, options?: AxiosRequestConfig): Promise<AxiosResponse<DappGetVerificationId>> {
            return DeprecatedAPIApiFp(configuration).domainverificationGetVerificationIdPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this to verify your domain ownership.
         * @summary Verify domain txt records.
         * @param {DomainverificationVerifyBody} [body] Send the request with githubId and domain.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async domainverificationVerifyPost(body?: DomainverificationVerifyBody, options?: AxiosRequestConfig): Promise<AxiosResponse<DappVerify>> {
            return DeprecatedAPIApiFp(configuration).domainverificationVerifyPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Build Download URL
         * @param {string} dappId Dapp Id where upload will happen
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadBuildUrl(dappId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<PreSignedUrlResponse>> {
            return DeprecatedAPIApiFp(configuration).downloadBuildUrl(dappId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download dapp Build
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DeprecatedAPIApiFp(configuration).downloadDapp(dappId, userId, userAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDApp(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DeprecatedAPIApiFp(configuration).getDApp(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
         * @summary Get dApp
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isListed] DApp is listed or not
         * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
         * @param {string} [language] DApp&#x27;s language
         * @param {Array<string>} [availableOnPlatform] DApp is listed or not
         * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
         * @param {number} [minAge] Minimum age
         * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
         * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
         * @param {Array<string>} [allowedInCountries] dApp allowed countries
         * @param {Array<string>} [blockedInCountries] dApp blocked countries
         * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
         * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
         * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
         * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDAppV1(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, storeKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200>> {
            return DeprecatedAPIApiFp(configuration).getDAppV1(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, storeKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
         * @summary Get Featured Sections
         * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturedDApps(storeKey?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<FeaturedSection>>> {
            return DeprecatedAPIApiFp(configuration).getFeaturedDApps(storeKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStore(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Store>> {
            return DeprecatedAPIApiFp(configuration).getStore(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the store title
         * @summary Registry title
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreTitle(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DeprecatedAPIApiFp(configuration).getStoreTitle(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the particular store
         * @summary Get Store
         * @param {string} key unique id of a store.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStoreV1(key: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Store>> {
            return DeprecatedAPIApiFp(configuration).getStoreV1(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Visit dapp's homepage
         * @param {string} dappId The dappId of dapp where to visit.
         * @param {string} [userId] 
         * @param {string} [userAddress] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async visitDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return DeprecatedAPIApiFp(configuration).visitDapp(dappId, userId, userAddress, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeprecatedAPIApi - object-oriented interface
 * @export
 * @class DeprecatedAPIApi
 * @extends {BaseAPI}
 */
export class DeprecatedAPIApi extends BaseAPI {
    /**
     * 
     * @summary Search DApp By Dapp Id
     * @param {string} dappId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async apiV1DappSearchByIdGet(dappId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Dapp>> {
        return DeprecatedAPIApiFp(this.configuration).apiV1DappSearchByIdGet(dappId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Uploading dapp screenshots | logo | banner | dApp file to the servers
     * @summary Upload dApp files
     * @param {string} dappId 
     * @param {string} field 
     * @param {Array<Blob>} dAppFiles 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dAppFilesForm(dappId: string, field: string, dAppFiles: Array<Blob>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2001>> {
        return DeprecatedAPIApiFp(this.configuration).dAppFilesForm(dappId, field, dAppFiles, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All category with subcategories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dappCategoriesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2002>> {
        return DeprecatedAPIApiFp(this.configuration).dappCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get All rating of a dapp
     * @param {string} dappId 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dappRateDappIdGet(dappId: string, page?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DappRatingResponse>> {
        return DeprecatedAPIApiFp(this.configuration).dappRateDappIdGet(dappId, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this to get a user's rating for a dapp
     * @summary Get User dApp Rating
     * @param {string} dappId 
     * @param {string} [userId] 
     * @param {string} [userAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dappRateGet(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DappRatingRes>> {
        return DeprecatedAPIApiFp(this.configuration).dappRateGet(dappId, userId, userAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this to register a rating from a user for a dApp
     * @summary Rate the dApp
     * @param {DappRating} [body] Send the request with dApp parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dappRatePost(body?: DappRating, options?: AxiosRequestConfig) : Promise<AxiosResponse<DappRatingRes>> {
        return DeprecatedAPIApiFp(this.configuration).dappRatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search DApp By Dapp Id
     * @param {string} dappId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async dappSearchByIdGet(dappId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Dapp>> {
        return DeprecatedAPIApiFp(this.configuration).dappSearchByIdGet(dappId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this to get a domain verification to code to verify domain ownership.
     * @summary Get a domain verification code
     * @param {DomainverificationGetVerificationIdBody} [body] Send the request with githubId and domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async domainverificationGetVerificationIdPost(body?: DomainverificationGetVerificationIdBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<DappGetVerificationId>> {
        return DeprecatedAPIApiFp(this.configuration).domainverificationGetVerificationIdPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Use this to verify your domain ownership.
     * @summary Verify domain txt records.
     * @param {DomainverificationVerifyBody} [body] Send the request with githubId and domain.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async domainverificationVerifyPost(body?: DomainverificationVerifyBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<DappVerify>> {
        return DeprecatedAPIApiFp(this.configuration).domainverificationVerifyPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Build Download URL
     * @param {string} dappId Dapp Id where upload will happen
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async downloadBuildUrl(dappId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<PreSignedUrlResponse>> {
        return DeprecatedAPIApiFp(this.configuration).downloadBuildUrl(dappId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Download dapp Build
     * @param {string} dappId The dappId of dapp where to visit.
     * @param {string} [userId] 
     * @param {string} [userAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async downloadDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DeprecatedAPIApiFp(this.configuration).downloadDapp(dappId, userId, userAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
     * @summary Get dApp
     * @param {number} [page] Current page
     * @param {number} [limit] Page size
     * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
     * @param {boolean} [isListed] DApp is listed or not
     * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
     * @param {string} [language] DApp&#x27;s language
     * @param {Array<string>} [availableOnPlatform] DApp is listed or not
     * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
     * @param {number} [minAge] Minimum age
     * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
     * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
     * @param {Array<string>} [allowedInCountries] dApp allowed countries
     * @param {Array<string>} [blockedInCountries] dApp blocked countries
     * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
     * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
     * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getDApp(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DeprecatedAPIApiFp(this.configuration).getDApp(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all dApps or search by a keyword. Optionally, filter on specific attributes of the dApp.  This API call will get all the dApps or perform a text search.
     * @summary Get dApp
     * @param {number} [page] Current page
     * @param {number} [limit] Page size
     * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
     * @param {boolean} [isListed] DApp is listed or not
     * @param {number} [chainId] DApp supported chainId&#x27;s. Only dApps belonging to this chainID will be returned.
     * @param {string} [language] DApp&#x27;s language
     * @param {Array<string>} [availableOnPlatform] DApp is listed or not
     * @param {boolean} [matureForAudience] Mentions if the app is for all ages or only mature audience
     * @param {number} [minAge] Minimum age
     * @param {string} [listedOnOrAfter] The date dApp was listed on or after. Date should be in ISO format.
     * @param {string} [listedOnOrBefore] The date dApp was listed on or before. Date should be in ISO format.
     * @param {Array<string>} [allowedInCountries] dApp allowed countries
     * @param {Array<string>} [blockedInCountries] dApp blocked countries
     * @param {Array<Array<string>>} [categories] The categories in which dApps belong. Multiple categories are joined using OR operator.
     * @param {string} [orderBy] Want to get dapp by order(asc, desc) by one or more params.
     * @param {Array<Array<string>>} [subCategory] The sub-category in which dApps belong. Multiple sub-category are joined using OR operator.
     * @param {string} [storeKey] The name of store for which whitelisted dapps have to fetch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getDAppV1(page?: number, limit?: number, search?: string, isListed?: boolean, chainId?: number, language?: string, availableOnPlatform?: Array<string>, matureForAudience?: boolean, minAge?: number, listedOnOrAfter?: string, listedOnOrBefore?: string, allowedInCountries?: Array<string>, blockedInCountries?: Array<string>, categories?: Array<Array<string>>, orderBy?: string, subCategory?: Array<Array<string>>, storeKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200>> {
        return DeprecatedAPIApiFp(this.configuration).getDAppV1(page, limit, search, isListed, chainId, language, availableOnPlatform, matureForAudience, minAge, listedOnOrAfter, listedOnOrBefore, allowedInCountries, blockedInCountries, categories, orderBy, subCategory, storeKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch featured sections of registry OR if you provide storeKey in query it will fetch featured sections from store.
     * @summary Get Featured Sections
     * @param {string} [storeKey] Unique Id of a particular store. provide only if you want to fetch feature section form a particular store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getFeaturedDApps(storeKey?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<FeaturedSection>>> {
        return DeprecatedAPIApiFp(this.configuration).getFeaturedDApps(storeKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the particular store
     * @summary Get Store
     * @param {string} key unique id of a store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getStore(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Store>> {
        return DeprecatedAPIApiFp(this.configuration).getStore(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the store title
     * @summary Registry title
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getStoreTitle(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DeprecatedAPIApiFp(this.configuration).getStoreTitle(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the particular store
     * @summary Get Store
     * @param {string} key unique id of a store.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async getStoreV1(key: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Store>> {
        return DeprecatedAPIApiFp(this.configuration).getStoreV1(key, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Visit dapp's homepage
     * @param {string} dappId The dappId of dapp where to visit.
     * @param {string} [userId] 
     * @param {string} [userAddress] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeprecatedAPIApi
     */
    public async visitDapp(dappId: string, userId?: string, userAddress?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return DeprecatedAPIApiFp(this.configuration).visitDapp(dappId, userId, userAddress, options).then((request) => request(this.axios, this.basePath));
    }
}
