/* tslint:disable */
/* eslint-disable */
/**
 * Meroku API Documentation
 * Open API specs for Meroku APIs. These APIs are required to inteact with the registry in a safe, easy way. The recommended way to use in a project is to use the npm package published at [@merokudao/storekit-sdk](https://www.npmjs.com/package/@merokudao/storekit-sdk). This npmjs package is a wrapper around the api. You would still want to use the APIs if you're building on a different platform.  # Authentication - To learn more on Authentication and the benefits of using higher rate limit, [read this Meroku.xyz blog post](https://meroku.xyz/2023/06/08/meroku-api-updates/). - To request an API key [fill this developer access form](https://form.jotform.com/231576486954067) - You can try this UI without getting any API Key as well # Learn More - [How to build a dApp Store using Meroku APIs](https://docs.meroku.org/dapp-store-kit-docs/for-dapp-store-builders#api--sdk-1) - [Meroku Blog](https://meroku.xyz) # Support - [Support Discourse Group](https://meroku.discourse.group) # Stay Connected - [Follow us on Github](https://github.com/merokudao) - [Follow us on Twitter](https://twitter.com/MerokuStore) 
 *
 * OpenAPI spec version: 1.27
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse20010 } from '../models';
import { InlineResponse20011 } from '../models';
import { InlineResponse2009 } from '../models';
/**
 * DeveloperProfilesApi - axios parameter creator
 * @export
 */
export const DeveloperProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autocompleteDeveloper: async (search: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            if (search === null || search === undefined) {
                throw new RequiredError('search','Required parameter search was null or undefined when calling autocompleteDeveloper.');
            }
            const localVarPath = `/api/v1/dev/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search developer By devId
         * @param {string} devId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDeveloperByDevId: async (devId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'devId' is not null or undefined
            if (devId === null || devId === undefined) {
                throw new RequiredError('devId','Required parameter devId was null or undefined when calling searchDeveloperByDevId.');
            }
            const localVarPath = `/api/v1/dev/search/{devId}`
                .replace(`{${"devId"}}`, encodeURIComponent(String(devId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Search Developer By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDeveloperByOwnerAddress: async (ownerAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ownerAddress' is not null or undefined
            if (ownerAddress === null || ownerAddress === undefined) {
                throw new RequiredError('ownerAddress','Required parameter ownerAddress was null or undefined when calling searchDeveloperByOwnerAddress.');
            }
            const localVarPath = `/api/v1/dev/search/address/{ownerAddress}`
                .replace(`{${"ownerAddress"}}`, encodeURIComponent(String(ownerAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all stores or search by a keyword. Optionally, filter on specific attributes of the store. This API call will get all the store or perform a text search.
         * @summary Search Developer
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchDeveloperProfile: async (page?: number, limit?: number, search?: string, isMinted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/dev/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("apikey")
                    : await configuration.apiKey;
                localVarHeaderParameter["apikey"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (isMinted !== undefined) {
                localVarQueryParameter['isMinted'] = isMinted;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeveloperProfilesApi - functional programming interface
 * @export
 */
export const DeveloperProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteDeveloper(search: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20011>>> {
            const localVarAxiosArgs = await DeveloperProfilesApiAxiosParamCreator(configuration).autocompleteDeveloper(search, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search developer By devId
         * @param {string} devId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperByDevId(devId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await DeveloperProfilesApiAxiosParamCreator(configuration).searchDeveloperByDevId(devId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Search Developer By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperByOwnerAddress(ownerAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20010>>> {
            const localVarAxiosArgs = await DeveloperProfilesApiAxiosParamCreator(configuration).searchDeveloperByOwnerAddress(ownerAddress, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all stores or search by a keyword. Optionally, filter on specific attributes of the store. This API call will get all the store or perform a text search.
         * @summary Search Developer
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperProfile(page?: number, limit?: number, search?: string, isMinted?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse2009>>> {
            const localVarAxiosArgs = await DeveloperProfilesApiAxiosParamCreator(configuration).searchDeveloperProfile(page, limit, search, isMinted, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeveloperProfilesApi - factory interface
 * @export
 */
export const DeveloperProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Auto-Complete search
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autocompleteDeveloper(search: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20011>> {
            return DeveloperProfilesApiFp(configuration).autocompleteDeveloper(search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search developer By devId
         * @param {string} devId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperByDevId(devId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return DeveloperProfilesApiFp(configuration).searchDeveloperByDevId(devId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Search Developer By owner Address
         * @param {string} ownerAddress 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperByOwnerAddress(ownerAddress: string, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20010>> {
            return DeveloperProfilesApiFp(configuration).searchDeveloperByOwnerAddress(ownerAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all stores or search by a keyword. Optionally, filter on specific attributes of the store. This API call will get all the store or perform a text search.
         * @summary Search Developer
         * @param {number} [page] Current page
         * @param {number} [limit] Page size
         * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
         * @param {boolean} [isMinted] DApp is listed or not
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchDeveloperProfile(page?: number, limit?: number, search?: string, isMinted?: boolean, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse2009>> {
            return DeveloperProfilesApiFp(configuration).searchDeveloperProfile(page, limit, search, isMinted, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeveloperProfilesApi - object-oriented interface
 * @export
 * @class DeveloperProfilesApi
 * @extends {BaseAPI}
 */
export class DeveloperProfilesApi extends BaseAPI {
    /**
     * 
     * @summary Auto-Complete search
     * @param {string} search 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperProfilesApi
     */
    public async autocompleteDeveloper(search: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20011>> {
        return DeveloperProfilesApiFp(this.configuration).autocompleteDeveloper(search, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search developer By devId
     * @param {string} devId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperProfilesApi
     */
    public async searchDeveloperByDevId(devId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return DeveloperProfilesApiFp(this.configuration).searchDeveloperByDevId(devId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Search Developer By owner Address
     * @param {string} ownerAddress 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperProfilesApi
     */
    public async searchDeveloperByOwnerAddress(ownerAddress: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20010>> {
        return DeveloperProfilesApiFp(this.configuration).searchDeveloperByOwnerAddress(ownerAddress, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all stores or search by a keyword. Optionally, filter on specific attributes of the store. This API call will get all the store or perform a text search.
     * @summary Search Developer
     * @param {number} [page] Current page
     * @param {number} [limit] Page size
     * @param {string} [search] A string to be used for search. The search happens on the &#x60;name&#x60; and &#x60;tags&#x60; fields of the dApp. If this is not present, all dApps are returned.
     * @param {boolean} [isMinted] DApp is listed or not
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeveloperProfilesApi
     */
    public async searchDeveloperProfile(page?: number, limit?: number, search?: string, isMinted?: boolean, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse2009>> {
        return DeveloperProfilesApiFp(this.configuration).searchDeveloperProfile(page, limit, search, isMinted, options).then((request) => request(this.axios, this.basePath));
    }
}
